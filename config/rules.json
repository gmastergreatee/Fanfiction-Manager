[
  {
    "guid": "8509e72e-debb-4657-a46d-b4f6f8d2b4cb",
    "rule_name": "mtlnation.com",
    "url_regex": "(?:https://)*mtlnation.com/novel/([a-z\\-]*)",
    "pagetype_code": "let matches = new RegExp('(?:https://)*mtlnation.com/novel/([a-z\\-0-9]*)').exec('https://mtlnation.com/novel/pirate-salted-fish-admiral');\nif (matches != null) {\n    return 0;\n}",
    "toc_code": "let matches = new RegExp('(?:https://)*mtlnation.com/novel/([a-z\\-0-9]*)').exec(window.location.href);\nlet novel_slug = matches[1];\n\nnovelData = JSON.parse(await fetch('https://api.mtlnation.com/api/v2/novels/' + novel_slug).then(x => x.text())).data;\nchapterURLs = JSON.parse(await fetch('https://api.mtlnation.com/api/v2/novels/' + novelData.id + '/chapters/').then(x => x.text())).data.map(x => 'https://mtlnation.com/novel/' + novelData.slug + '/' + x.slug);\n\nlet retMe = {\n  'CoverURL': 'https://api.mtlnation.com/media/' + novelData.cover,\n  'Title': novelData.title,\n  'Summary': novelData.synopsis.replace(/\\n|(&nbsp;)/g, '').replace(/(<p><\\/p>)/g, ''),\n  'ChapterCount': chapterURLs.length,\n  'ChapterURLs': chapterURLs,\n};\n\nreturn retMe;",
    "chapter_code": "let matches = new RegExp('(?:https://)*mtlnation.com/novel/([a-z\\-0-9]*)/([a-z\\-0-9]*)').exec(window.location.href);\nif (matches == null) {\n    return;\n}\n\nlet novel_slug = matches[1];\nlet chapter_slug = matches[2];\n\nlet fetchOptions = {};\n\n// checking authorization header\nif (localStorage['mtlnation.frontend']) {\n    fetchOptions['headers'] = { 'authorization': 'JWT ' + JSON.parse(localStorage['mtlnation.frontend'].split('|')[1]).token };\n}\n\nlet chapterData = JSON.parse(await fetch('https://api.mtlnation.com/api/v2/chapters/' + novel_slug + '/' + chapter_slug, fetchOptions).then(x => x.text()));\nif (chapterData) {\n    chapterData = chapterData.data;\n} else {\n    return;\n}\n\nlet retMe = [\n  {\n    \"title\": chapterData.title,\n    \"content\": '<p>' + chapterData.content.replace(/\\n|<br>|\\r|^<p>/g, '').replace(/<\\/p>$/g, '').split('</p><p>').map(x => x.trim()).join('</p><p>') + '</p>',\n    \"nextURL\": \"\"\n  },\n];\n\nreturn retMe;",
    "url_blocks": ".js\n.css"
  },
  {
    "guid": "f35b1f2d-4841-494f-a9f9-514e18daf550",
    "rule_name": "mtlnovel.com",
    "url_regex": "(?:https://)*(?:www\\.)*mtlnovel.com/.*",
    "pagetype_code": "// https://www.mtlnovel.com/i-the-grandson-of-garp-scared-luffy-into-tears/chapter-1/\n// https://www.mtlnovel.com/i-the-grandson-of-garp-scared-luffy-into-tears/chapter-2/\n\ninjectJquery();\n\nreturn 0;",
    "toc_code": "let retMe = {\n  'CoverURL': $('.post-content amp-img').last().attr('src'),\n  'Title': $('h1.entry-title').text(),\n  'Summary': '<p>' + Array.from($('#panelnovelinfo .desc p:not([class])')).map(x => x.innerHTML.trim()).join('</p><p>') + '</p>',\n  'ChapterCount': 1,           // chapter count here\n  'ChapterURLs': [],\n};\n\nlet chapterListURLs = Array.from($('#panelchapterlist amp-list')).map(e => e.attributes['src'].value);\n\nfor (let i = 0; i < chapterListURLs.length; i++) {\n    try {\n        let data = JSON.parse(await fetch(chapterListURLs[i]).then(x => x.text()));\n        retMe.ChapterURLs.push(...data.items.map(x => x.permalink));\n    } catch { throw new Error('Error getting chapter-list'); }\n}\n\nretMe.ChapterCount = retMe.ChapterURLs.length;\n\nreturn retMe;",
    "chapter_code": "let retMe = [\n  {\n    \"title\": \"\",    // title of chapter\n    \"content\": '<p>' + htmlEncode($('.par').text()).split('<br>').map(x => x.trim()).filter(x => x != '').join('</p><p>') + '</p>',  // content\n    \"nextURL\": \"\"   // when \"ChapterCount\" <= 0 & \"nextURL\" always comes non-empty\n                    // will loop infinitely unless something else(javascript) breaks\n  },\n];\n\nreturn retMe;",
    "url_blocks": "/pagead/\n.svg\n.png\nampproject.org\n"
  },
  {
    "guid": "f49fc50c-07e1-4d1e-914a-62ad4da423cd",
    "rule_name": "fulffyball.blogspot.com",
    "url_regex": "(?:https://)*fulffyball.blogspot.com/[0-9]*/[0-9]*/.*",
    "pagetype_code": "injectJquery();\n\nreturn 0;",
    "toc_code": "// TOC content isn't proper in this site, therefore not implented\n\nthrow new Error('TOC content isn\\'t proper in this site, therefore feature not implemented');\n\nlet retMe = {\n  'CoverURL': '',              // may be empty\n  'Title': 'novel name here',\n  'Summary': '',               // may be empty\n  'ChapterCount': 1,           // chapter count here\n  'ChapterURLs': [             // list of chapter-URLs\n      '',                      // must contain atleast the first chapter URL\n      '',\n  ],\n};\n\nreturn retMe;",
    "chapter_code": "let retMe = [\n  {\n    \"title\": \"\",\n    \"content\": \"\",  // content\n    \"nextURL\": \"\"   // when \"ChapterCount\" <= 0 & \"nextURL\" always comes non-empty\n                    // will loop infinitely unless something else(javascript) breaks\n  },\n];\n\n// grabbing chapter name\nif ($('#post-body h2').length > 1) {\n    if ($('#post-body h2')[1].innerText.trim() != '') {\n        retMe[0].title = $('#post-body h2')[1].innerText.replace(/.*chapter\\s*[0-9]+\\s*:*\\s*/gi, '');\n    } else {\n        retMe[0].title = $('#post-body h2')[0].innerText.replace(/.*chapter\\s*[0-9]+\\s*:*\\s*/gi, '');\n    }\n} else if ($('#post-body h2').length > 0) {\n    retMe[0].title = $('#post-body h2')[0].innerText.replace(/.*chapter\\s*[0-9]+\\s*:*\\s*/gi, '')\n} else { }\n\n// removing undesirables\n$('#post-body p[style], #post-body div[style], #post-body h2').remove();\n\n// getting content\nretMe[0].content = '<p>' + htmlEncode($('#post-body')[0].innerText).replace(/&nbsp;/g, ' ').split('<br>').map(e => e.trim()).filter(e => e != '').join('</p><p>') + '</p>';\n\nreturn retMe;",
    "url_blocks": "/feeds/\n.js\n.css\n/img/\n.woff\n/gtag/\n.ttf"
  },
  {
    "guid": "330b55ff-5f7e-481c-9480-5d35fd058a29",
    "rule_name": "Ranobes.net",
    "url_regex": "(?:https://)*(?:www|m)*\\.*ranobes\\.net/(?:(?:novels/)|(?:chapters/)|(?:[a-z\\-]*))([0-9]*).*",
    "pagetype_code": "injectJquery();\nreturn 0;",
    "toc_code": "let matches = new RegExp('(?:https://)*(?:www|m)*\\.*ranobes\\.net/(?:(?:novels/)|(?:chapters/)|(?:[a-z\\-]*))([0-9]*).*').exec(window.location.href);\n\nif (matches == null) {\n    throw new Error('Regex match not found');\n}\n\n$('.r-desription a').remove();\n\nlet retMe = {\n  'CoverURL': $('meta[property=\"og:image\"]')[0].content,\n  'Title': $('meta[property=\"og:title\"]')[0].content,\n  'Summary': $('.r-desription .moreless__full').html().trim(),\n  'ChapterCount': 1,           // chapter count here\n  'ChapterURLs': [],\n};\n\nlet chapterListURL = 'https://ranobes.net/chapters/' + matches[1] + '/';\nconsole.log('Downloading ChapterList page 1 ...');\nlet htm = (await fetch(chapterListURL).then(e => e.text()));\nlet dIndex = htm.indexOf('__DATA__');\nhtm = htm.substr(dIndex);\ndIndex = htm.indexOf('</script>');\nhtm = htm.substr(0, dIndex + 10);\nlet match = new RegExp(/.*__DATA__\\s*=\\s*{(.*)}<\\/script>/g).exec(htm);\nlet dat = JSON.parse('{' + match[1] + '}');\nretMe.ChapterURLs.push(...dat.chapters.map(el => el.link));\nfor (let i = 1; i < dat.pages_count; i++) {\n    console.log('Downloading ChapterList page ' + (i + 1) + ' ...');\n    htm = (await fetch(chapterListURL + 'page/' + (i + 1)).then(e => e.text()));\n    dIndex = htm.indexOf('__DATA__');\n    htm = htm.substr(dIndex);\n    dIndex = htm.indexOf('</script>');\n    htm = htm.substr(0, dIndex + 10);\n    match = new RegExp(/.*__DATA__\\s*=\\s*{(.*)}<\\/script>/g).exec(htm);\n    dat = JSON.parse('{' + match[1] + '}');\n    retMe.ChapterURLs.push(...dat.chapters.map(el => el.link));\n}\nconsole.log('All downloaded');\nretMe.ChapterURLs.reverse();\nretMe.ChapterCount = retMe.ChapterURLs.length;\n\nreturn retMe;",
    "chapter_code": "let retMe = [\n  {\n    \"title\": $('title')[0].innerText.replace(/\\s*\\|.*$/gi, '').replace(/^\\s*chapter\\s*[0-9]*:*\\s*/gi, ''),\n    \"content\": '<p>' + Array.from($('#arrticle p')).map(e => e.innerText).join('</p><p>') + '</p>',\n    \"nextURL\": \"\"   // when \"ChapterCount\" <= 0 & \"nextURL\" always comes non-empty\n                    // will loop infinitely unless something else(javascript) breaks\n  },\n];\n\nreturn retMe;",
    "url_blocks": "/gtag/\n.js\ngoogleads\nadsbygoogle\n.woff\n.php\n.gif\n.ttf\n.css\n.png"
  },
  {
    "guid": "340044b7-321e-4fe8-8c15-9c59e22f6fc8",
    "rule_name": "Wattpad.com",
    "url_regex": "(?:https://)*(?:www|m|t)\\.wattpad\\.com/((?:text-)([0-9]*)-([0-9]*)-([a-z0-9]*)|(?:story/)([0-9]*)|([0-9]*)).*",
    "pagetype_code": "return 0;",
    "toc_code": "let matches = new RegExp('(?:https://)*(?:www|m|t)\\.wattpad\\.com/((?:text-)([0-9]*)-([0-9]*)-([a-z0-9]*)|(?:story/)([0-9]*)|([0-9]*)).*').exec(window.location.href);\n\nif (!matches[0].includes('/story/')) {\n  return;\n}\n\nlet data = JSON.parse(await fetch('https://www.wattpad.com/api/v3/stories/' + matches[5] + '?fields=title%2Cdescription%2Cparts%2Ccover').then(e => e.text()));\ndata.parts = data.parts.map(i => i.url);\n\nlet retMe = {\n  'CoverURL': data.cover,\n  'Title': data.title,\n  'Summary': '<p>' + data.description.split('\\n').map(i => i.replace(/\\\"/g,'\\\"').trim()).filter(i => i != '').join('</p><p>') + '</p>',\n  'ChapterCount': data.parts.length,\n  'ChapterURLs': data.parts\n};\n\nreturn retMe;",
    "chapter_code": "let matches = new RegExp('(?:https://)*(?:www|m|t)\\.wattpad\\.com/((?:text-)([0-9]*)-([0-9]*)-([a-z0-9]*)|(?:story/)([0-9]*)|([0-9]*)).*').exec(window.location.href);\nif (matches[0].includes('/story/')) {\n  return;\n}\n\nlet title = '';\nlet content = '';\nlet nextURL = '';\n\nif (!matches[0].includes('/text')) {\n  let prefetched = window.prefetched['part.' + matches[1] + '.metadata'];\n  nextURL = prefetched.data.text_url.text;\n  return {\n    retry: 1,\n    nextURL: nextURL,\n    extras: prefetched.data.group.parts.map(function(x) { return { id: x.id, title: x.title }; })\n  };\n} else if (matches[0].includes('/text')) {\n  injectJquery();\n  if (!extras || extras.length <= 0) {\n    return;\n  }\n  let storyId = matches[2];\n  let chapterId = matches[3];\n  let uid = matches[4];\n  let currentChapter = extras.find(i => i.id == chapterId);\n  title = currentChapter.title;\n  $('body').html($('body pre')[0].innerText);\n  content = '<p>' + $('body')[0].innerText.replace(/\\s*\\n+\\s*/g, '<br>').split('<br>').join('</p><p>') + '</p>';\n  let currentChapterIndex = extras.indexOf(currentChapter);\n  if (currentChapterIndex + 1 < extras.length) {\n    let nextChapterId = extras[currentChapterIndex + 1].id;\n    let refresh_token = 'https://api.wattpad.com/v4/parts/' + nextChapterId + '/token';\n    nextURL = 'https://t.wattpad.com/text-' + storyId + '-' + nextChapterId + '-' + uid + '?' + JSON.parse(await fetch(refresh_token).then(e => e.text())).token;\n  }\n}\n\nlet retMe = [\n  {\n    \"title\": title,\n    \"content\": content,\n    \"nextURL\": nextURL\n  },\n];\n\nreturn retMe;",
    "url_blocks": "static.wattpad.com\nprebid.js\ngoogle.com\ngoogletagmanager\npwt.js\n.jpg\n.gif\n.png\n/css\n/btloader"
  },
  {
    "guid": "b40d6fa6-2caa-4485-984e-1c23a5ad7046",
    "rule_name": "RD-MTL",
    "url_regex": "(?:https://)*(?:www|m|rd-mtl)*\\.*(blogspot|wixsite)\\.com/(p|rdmtl)/.*",
    "pagetype_code": "injectJquery();\n\nif ($('[itemprop] .post-body h2.font_2').length > 0) {\n  return 0;\n}\n\nif ($('a[aria-label=\"T.O.C\"]').length > 0) {\n  return 0;\n}\n\nif ($('.post-body').length > 0) {\n  return 0;\n}",
    "toc_code": "injectJquery();\n\nlet retMe = {\n  'CoverURL': $('[itemprop] .post-body img').first().parent('a')[0].href,\n  'Title': $('h3.post-title')[0].innerText,\n  'Summary': '<p>' + Array.from($('[itemprop] .post-body h2.font_2')).map(e => e.innerText.replace(/\\s*\\n\\s*/g,'<br>').trim()).join('</p><p>') + '</p>',\n  'ChapterCount': 1,           // chapter count here\n  'ChapterURLs': [],\n};\n\nretMe.ChapterURLs = [...new Set(Array.from($('[itemprop] .post-body div[style] span > a, [itemprop] .post-body div[style] b > a, [itemprop] .post-body span.color_11:last a')).map(a => a.href))];\nretMe.ChapterCount = retMe.ChapterURLs.length;\n\nreturn retMe;",
    "chapter_code": "let retMe = [\n  {\n    \"title\": \"\",    // title of chapter\n    \"content\": \"\",  // content\n    \"nextURL\": \"\"   // when \"ChapterCount\" <= 0 & \"nextURL\" always comes non-empty\n                    // will loop infinitely unless something else(javascript) breaks\n  },\n];\n\nif ($('a[aria-label=\"T.O.C\"]').length > 0) {\n  retMe[0].title = $('[data-testid=\"richTextElement\"]')[3].innerText.replace(/Episode\\s*\\d+:\\s*/g, '');\n  let contentPart = $('[data-testid=\"richTextElement\"]').length;\n  let startIndex = 4;\n  let endIndex = contentPart - 3;\n  for (let j = startIndex; j <= endIndex; j++) {\n    retMe[0].content += '<p>' + $('[data-testid=\"richTextElement\"]')[j].innerText.replace(/\\s*\\n+\\s*/g, '<br>').replace(/[^ -~]+/g, \"\").split('<br>').filter(i => i.trim() != '').join('</p><p>') + '</p>';\n  }\n} else if ($('.post-body').length > 0) {\n  let stuff = $('.post-body p');\n  let titleTarget = stuff[1];\n  let bodyTarget = Array.from(stuff).slice(2);\n  if (stuff.length <= 0) {\n    stuff = $('.post-body > div');\n    titleTarget = stuff[1];\n    bodyTarget = Array.from($(stuff[stuff.length - 2]).find('span'));\n  }\n  retMe[0].title = titleTarget.innerText.trim().replace(/Episode\\s*\\d+\\s*:\\s*/g, '');\n  retMe[0].content = '<p>' + bodyTarget.map(i => i.innerText.trim()).filter(i => i != '').join('</p><p>') + '</p>';\n}\n\nreturn retMe;",
    "url_blocks": ".js\n.css\ngoogleusercontent\n/img/\n/i/\nblogblog\n.woff\n.ttf\n_api\n/media/\nwix.com"
  },
  {
    "guid": "18f77d09-fe80-4a18-9976-a9a54e480148",
    "rule_name": "ArchiveOfOurOwn.org",
    "url_regex": "(?:https://)*(?:www|m)*archiveofourown\\.org/works/([0-9]+).*",
    "pagetype_code": "injectJquery();\n\nlet adult_proceed = $(\"#main ul.actions a\");\nif (adult_proceed.length == 2) {\n  return {\n    retry: 1,\n    nextURL: adult_proceed[0].href,\n  };\n}\n\nif ($(\"#selected_id\")) {\n  return 0;\n}\n",
    "toc_code": "injectJquery();\n\nlet matches = new RegExp(/(?:https:\\/\\/)*(?:www|m)*archiveofourown\\.org\\/works\\/([0-9]+)\\/.*/gi).exec(window.location.href);\n\nif ($('.summary blockquote').length <= 0) {\n  // summary not found, meaning this ain't TOC page, switching to TOC page\n  return {\n    retry: 1,\n    nextURL: window.location.origin + '/works/' + matches[1]\n  };\n}\n\nlet retMe = {\n  'CoverURL': '',              // may be empty\n  'Title': $('h2.title')[0].innerText.replace(/\\n/g, '').trim(),\n  'Summary': $('.summary blockquote')[0].innerHTML.replace(/\\n/g, '').trim(),\n  'ChapterCount': $('#selected_id option').length,\n  'ChapterURLs': Array.from($('#selected_id option')).map(e => window.location.origin + '/works/' + matches[1] + '/chapters/' + e.value),\n};\n\nreturn retMe;",
    "chapter_code": "injectJquery();\n\n$('.userstuff.module .landmark.heading').remove();\n$('.userstuff.module a[title]').remove();\nArray.from($('.userstuff.module a')).forEach(el => el.target = '_blank');\n\nlet retMe = [\n  {\n    \"title\": $('h3.title').text().replace(/\\n/g, '').trim(),\n    \"content\": $('.userstuff.module').html().replace(/\\n/g, '').trim(),\n    \"nextURL\": \"\"   // when \"ChapterCount\" <= 0 & \"nextURL\" always comes non-empty\n                    // will loop infinitely unless something else(javascript) breaks\n  },\n];\n\nreturn retMe;",
    "url_blocks": ".js\n/images/\n/skins/\nfreecounterstat"
  },
  {
    "guid": "5516b773-f939-4c68-89c1-4c8ba6641822",
    "rule_name": "Royalroad.com",
    "url_regex": "(?:https://)*(?:www|m).royalroad.com/fiction/.+",
    "pagetype_code": "if (document.querySelector('.fic-header h1') != null) {\n    return 0;\n}",
    "toc_code": "let retMe = {\n  'CoverURL': window.fictionCover,\n  'Title': document.querySelector('.fic-header h1').innerText,\n  'Summary': document.querySelector('.fiction-info .description div').innerHTML.trim().replace(/\\n/g, ''),\n  'ChapterCount': window.chapters.length,\n  'ChapterURLs': window.chapters.map(i => window.location.origin + i.url),\n};\n\nreturn retMe;",
    "chapter_code": "let retMe = [\n  {\n    \"title\": document.querySelector('.fic-header h1').innerText,    // title of chapter\n    \"content\": document.querySelector('.chapter-content').innerHTML.trim().replace(/\\n/g,'').replace(/ data-original-margin=\"\"/g, ''),\n    \"nextURL\": \"\"   // when \"ChapterCount\" <= 0 & \"nextURL\" always comes non-empty\n                    // will loop infinitely unless something else(javascript) breaks\n  },\n];\n\nreturn retMe;",
    "url_blocks": "/a/c?\nanalytics.google\nsentry.js\nsite.js\n.woff2\n/covers\n/gtag\n/img/\ngstatic.com\n.png\nwebfont\nelastic-rum\nsecurepubads\namazon\n/ads\n.css\nemail-decode\nfonts.googleapis"
  },
  {
    "guid": "1456f9af-ab7e-4f5f-b441-77a30ede82b5",
    "rule_name": "COMRADEMAO",
    "url_regex": "(?:https://)*(?:www|m)*.comrademao.com/novel/.*",
    "pagetype_code": "if (jQuery || $) {\n$ = jQuery\n\nif ($('.entry-title').length > 0)\n    return 0;\n\nif ($('#chaptercontent').length > 0)\n    return 0;\n}",
    "toc_code": "let retMe = {\n  'CoverURL': $('.seriedetailcontent img')[0].src,\n  'Title': $('.infox h1')[0].innerText,\n  'Summary': $('.infox div:last').find('p')[0].innerHTML.replace(/\\n/g,''),\n  'ChapterCount': 1,           // chapter count here\n  'ChapterURLs': Array.from($('#chapterlist li a')).map(i => i.href).reverse(),\n};\n\nretMe.ChapterCount = retMe.ChapterURLs.length;\n\nreturn retMe;",
    "chapter_code": "if (jQuery || $) {\n    $ = jQuery\n}\n\n$('script,style,iframe').remove();\n\nlet retMe = [\n  {\n    \"title\": $('#chaptercontent .doc_header')[0].innerText,\n    \"content\": '<p>' + Array.from($('#chaptercontent p')).map(x => x.innerText).join('</p><p>') + '</p>',\n    \"nextURL\": \"\"   // when \"ChapterCount\" <= 0 & \"nextURL\" always comes non-empty\n                    // will loop infinitely unless something else(javascript) breaks\n  },\n];\n\nreturn retMe;",
    "url_blocks": "script.js\nuniconsent\npolls-js\nwpdcc\nwpdiscuz\nquicktags\ncomment-reply\nwp-emoji\ntranslate.google\n/collect?\n.css\n/gtag/\n/img/"
  },
  {
    "guid": "16ea8bfb-ab60-4043-a8e8-71a6928d3cd3",
    "rule_name": "NovelUpdates.com",
    "url_regex": "(?:https://)*(?:www|m).novelupdates.com/series/.+",
    "pagetype_code": "if ($('.my_popupreading_open').length >= 1)\n    return 0;",
    "toc_code": "let retMe = {\n  'CoverURL': '',              // may be empty\n  'Title': 'novel name here',\n  'Summary': '',               // may be empty\n  'ChapterCount': 1,           // chapter count here\n  'ChapterURLs': [             // list of chapter-URLs\n      '',                      // must contain atleast the first chapter URL\n      '',\n  ],\n};\n\nvar secs = 0;\n$('.my_popupreading_open').click();\n\nwhile ($('#my_popupreading a').length <= 0) {\n    await sleep(1000);\n    secs = 1;\n    if (secs >= 10)\n        return null;\n}\n\nretMe.CoverURL = $('.seriesimg img')[0].src;\nretMe.Title = $('.w-blog-content div')[0].innerText;\nretMe.Summary = $('#editdescription').html().replace(/\\n/g,'');\nretMe.ChapterURLs = Array.from($('#my_popupreading a[data-id]')).map(el => el.href).reverse();\nretMe.ChapterCount = retMe.ChapterURLs.length;\n\nreturn retMe;",
    "chapter_code": "let retMe = [\n  {\n    \"title\": \"\",    // title of chapter\n    \"content\": \"\",  // content\n    \"nextURL\": \"\"   // when \"ChapterCount\" <= 0 & \"nextURL\" always comes non-empty\n                    // will loop infinitely unless something else(javascript) breaks\n  },\n];\n\n//return retMe;\n\n// as novelupdates redirects to externel websites therefore chapter-script won't be run here\nreturn null;",
    "url_blocks": ""
  },
  {
    "guid": "bf04cf84-1bfc-4233-9fa7-19871eaca783",
    "rule_name": "Fanfiction.net",
    "url_regex": "(?:https://)*(?:www|m).fanfiction.net/([a-z]+)/([0-9]+)/([0-9]+)/([a-zA-Z0-9-]+)",
    "pagetype_code": "if (document.querySelector('#cf-wrapper #cookie-alert'))\n    return -1;\nif (document.querySelector('.cf-browser-verification.cf-im-under-attack'))\n    return -2;\nif (document.querySelector('#chap_select'))\n    return 0;",
    "toc_code": "let retMe = {\n  'CoverURL': '',\n  'Title': 'novel name here',\n  'Summary': '',\n  'ChapterCount': 1,\n  'ChapterURLs': [],\n};\n\nlet chaps = [];\nArray.from($('#chap_select').first().find('option')).forEach(el=>{\n    chaps.push(el.value);\n});\n\nlet matches = new RegExp('(?:https://)*(?:www|m).fanfiction.net/([a-z]+)/([0-9]+)/([0-9]+)/([a-zA-Z0-9-]+)').exec(window.location.href);\nchaps.forEach(el => {\n    retMe.ChapterURLs.push([window.location.origin, matches[1], matches[2], el, matches[4]].join('/'));\n});\n\nretMe.ChapterCount = chaps.length;\nretMe.Title = $('#profile_top b')[0].innerText;\nretMe.Summary = $('#profile_top div.xcontrast_txt').html();\nlet cover_url = $('#profile_top .cimage');\nif (cover_url.length > 0) {\n    let src = cover_url[0].src;\n    retMe.CoverURL = src.substr(0, src.length - 3) + '180/';\n}\n\nreturn retMe;",
    "chapter_code": "let retMe = [\n  {\n    \"title\": \"\",    // title of chapter\n    \"content\": $('.storytext').html(),  // content\n    \"nextURL\": \"\"\n  },\n];\n\nlet chap_select = document.getElementById('chap_select');\nif (chap_select != null) {\n    retMe[0].title = chap_select.options[chap_select.selectedIndex].text;\n}\n\nreturn retMe;",
    "url_blocks": "adsbygoogle\n.css"
  },
  {
    "guid": "4795a493-2a6e-4234-8dec-307b06129cd6",
    "rule_name": "WebNovel.com",
    "url_regex": "(?:https://)*(?:www|m)\\.webnovel\\.com/([a-z]+)/([0-9a-z\\-A-Z\\(\\)%']+)_([0-9]+)",
    "pagetype_code": "// chapter page 2 - actually checking JSON API\ntry {\n    let jsonObj = JSON.parse(document.body.innerText);\n    if (jsonObj.data.chapterInfo.chapterName)\n        return 0;\n} catch { }\n\n// toc page\nlet toc = $('a[title=\"Table of Contents\"]');\nif (toc && toc.length == 1) {\n    return 0;\n}\n\n// chapter page 1\nlet chapter = $('.cha-tit');\nif (chapter && chapter.length >= 1) {\n    return 0;\n}",
    "toc_code": "// throw error if TOCScript script run on chapter page\nlet chapter = $('.cha-tit');\nif (chapter && chapter.length == 1) {\n    return null;\n}\n\nlet retMe = {\n  'CoverURL': $('.det-info img')[1].src,\n  'Title': $('.det-info h1')[0].innerText.trim(),\n  'Summary': $('.det-tab-pane p')[0].innerHTML.trim(),\n  'ChapterCount': parseInt($('.det-hd h2 strong span')[0].innerText),\n  'ChapterURLs': [],\n};\n\nlet waitSeconds = 0;\n$('a[title=\"Table of Contents\"]')[0].click();\n\nwhile ($('#contents .g_loading').length)\n{\n    await sleep(1000);\n    waitSeconds += 1;\n    if (waitSeconds >= 10)\n        return null;\n}\n\nretMe.ChapterURLs = Array.from($('#contents a')).slice(1).map(el => el.href);\n\nreturn retMe;",
    "chapter_code": "let retMe = [\n  {\n    \"title\": \"\",    // title of chapter\n    \"content\": \"\",  // content\n    \"nextURL\": \"\"   // when \"ChapterCount\" <= 0 & \"nextURL\" always comes non-empty\n                    // will loop infinitely unless something else(javascript) breaks\n  },\n];\n\n// checking if REST API used\ntry {\n    let jsonObj = JSON.parse(document.body.innerText);\n    retMe[0].content = '<p>' + jsonObj.data.chapterInfo.contents.map(i => i.content.replace('\\r\\n', '')).join('</p><p>') + '</p>';\n    retMe[0].title = jsonObj.data.chapterInfo.chapterName.replace(/^\\s*chapter\\s*\\d*\\s*:*\\s*\\.*\\s*-*\\s*/gi, '').trim();\n    retMe[0].nextURL = window.location.href.split('&').map((el,i)=> i == 3 ? 'chapterId=' + jsonObj.data.chapterInfo.nextChapterId : el).join('&');\n    return retMe;\n} catch { }\n\n// getting data from random chapter page\nif (chapInfo) {\n    retMe[0].title = chapInfo.chapterInfo.chapterName.replace(/^\\s*chapter\\s*\\d*\\s*:*\\s*\\.*\\s*-*\\s*/gi, '').trim();\n    retMe[0].content = \"<p>\" + chapInfo.chapterInfo.contents.map(i => i.content.replace(/\\s*\\r+\\s*\\n+\\s*/g, '')).join(\"</p><p>\") + \"</p>\";\n} else {\n    retMe[0].title = $('#page .cha-tit h1').first().text().replace(/^\\s*chapter\\s*\\d*\\s*:*\\s*\\.*\\s*-*\\s*/gi, '').trim();\n    retMe[0].content = \"<p>\" + Array.from($(\".cha-words p\")).map((i) => i.innerHTML.trim()).join(\"</p><p>\") + \"</p>\";\n}\n\nlet nextChapData = $('link[rel=next]');\nif (nextChapData.length > 0) {\n    let matches = new RegExp(/.*\\/(\\d+)\\/(\\d+)/).exec(nextChapData[0].href);\n    let bookId = matches[1];\n    let nextChapterId = matches[2];\n    let _csrfToken = (await cookieStore.get('_csrfToken')).value;\n    let _fsae = (await cookieStore.get('_fsae')).value;\n\n    retMe[0].nextURL = 'https://www.webnovel.com/go/pcm/chapter/getContent?' +\n        '_csrfToken=' + _csrfToken +\n        '&_fsae=' + _fsae +\n        '&bookId=' + bookId +\n        '&chapterId=' + nextChapterId +\n        '&encryptType=3&_=' + _fsae;\n}\n\nreturn retMe;",
    "url_blocks": ".css\nquora\ngoogle\n/emoji\n/recommend\n/bookReview\n/powerStone\n/checkStatus"
  }
]